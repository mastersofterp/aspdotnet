const allData = []; function initializePivotTable(e) { let t = document.querySelector(`#${e}`), l = t.closest(".table-responsive").querySelector(".tableToolbarLeft"), a = document.createElement("span"); a.innerHTML = `<button type="button" class="btn btn-outline-info pivotTableBtn" data-bs-toggle="modal" data-bs-target="#pivotTableFor-${e}"><i class ="bi bi-bar-chart"></i>Pivot Table</button>`, l.appendChild(a), makeModalForPivotTable(e), addPivotTableScripts() } function addPivotTableScripts() { $(document).ready(function () { $.pivotUtilities.derivers; var e = $.extend($.pivotUtilities.renderers, $.pivotUtilities.plotly_renderers); $("#pivotTable").pivotUI(allData, { renderers: e, rendererOptions: { plotly: { width: 800, height: 600 } }, rowOrder: "value_a_to_z", colOrder: "value_z_to_a" }); let t = document.querySelector("#downloadPivotTable"); t.addEventListener("click", () => { $("#pivotTable .pvtTable").table2excel({ name: "Backup file for Pivot Table", filename: "PivotTable.xls", preserveColors: !1, exclude_img: !0, exclude_links: !0, exclude_inputs: !0 }) }); let l = document.querySelector("#printPivotTable"); l.addEventListener("click", function e() { var t = document.querySelector("#pivotTable .pvtTable"); (newWin = window.open("", "printwindow")).document.write('<html><head><title>Pivot Table!</title><link rel="stylesheet" type="text/css" href="../scss/main.css"><link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous"></head><body>'); var l = `<style type="text/css"> body{font-size:smaller;text-decoration:capitalize !important;font-weight:400 !Important;}table th, table td {border:1px solid #d6d6d6;padding:0em;}</style>`; newWin.document.write(l), newWin.document.write(t.outerHTML), newWin.document.write("</body></html>"), newWin.print(), newWin.close() }); let a = document.querySelector(".pvtAxisContainer.pvtRows.pvtUiCell.ui-sortable"), o = document.createElement("h6"); o.classList.add("text-center", "custom-row"), o.textContent = "Rows :", a.appendChild(o); let i = document.querySelector(".pvtAxisContainer.pvtHorizList.pvtCols.pvtUiCell.ui-sortable"), r = document.createElement("h6"); r.classList.add("text-center", "custom-column"), r.style.display = "inline-block", r.textContent = "Columns :", i.appendChild(r); let n = document.querySelectorAll('.pvtUi button[type="button"]'); n.forEach(e => { "Select None" === e.textContent ? e.classList.add("btn", "btn-outline-secondary", "custom-orange-btn", "btn-sm") : "Cancel" === e.textContent ? e.classList.add("btn", "btn-outline-danger", "btn-sm") : e.classList.add("btn", "btn-outline-primary", "btn-sm", "me-2") }); let s = document.querySelector(".pvtUiCell"), d = document.createElement("h6"); d.textContent = "Type :", s.prepend(d); let c = document.querySelector(".pvtVals.pvtUiCell"), u = document.createElement("h6"); u.classList.add("text-start"), u.textContent = "Values :", c.prepend(u) }) } function makeModalForPivotTable(e) { let t = document.createElement("span"); t.innerHTML = `<div class="modal fade" id="pivotTableFor-${e}" tabindex="-1" aria-labelledby="pivotTableLabel" aria-hidden="true"><div class="modal-dialog modal-fullscreen"><div class="modal-content"><div class="modal-header"><h5 class="modal-title" id="pivotTableLabel">Pivot Table</h5><button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button></div><div class="modal-body p-0"><div id='pivotTable'></div></div><div class="modal-footer"><button class="btn btn-primary btn-sm " id="downloadPivotTable" ><i class="bi bi-download me-1"></i>Download</button><a href="#" class="btn btn-outline-primary btn-sm" id="printPivotTable"><i class="bi bi-printer ms-1"></i>Print</a><button type="button" class="btn btn-outline-danger btn-sm" data-bs-dismiss="modal">Close</button> </div></div></div></div> `, document.body.appendChild(t) } function initializeCustomFilter(e, t, l) { let a = document.querySelector(`#${e}`), o = a.closest(".table-responsive").querySelector(".tableToolbarLeft"); initializeExportAll(e); let i = getColumnNames(a, t, l), r = getFirstColumnValues(a, l), n = document.createElement("span"); n.innerHTML = `<button type="button" class="btn btn-outline-success filterTableBtn" data-bs-toggle="modal" data-bs-target="#filterTableFor-${e}"><i class ="bi bi-funnel-fill F-A"></i>Filter</button>`, o.appendChild(n), makeModalForFIlterTable(e); let s = document.querySelector(`[data-options-for-filter-table='${e}'] i`), d = document.querySelector(`[data-sort-table-id='${e}']`), c = document.querySelector(`[data-options-for-filter-table='${e}']`); saveTheFilters(e, c), makeSavedFilters(e, o), populateFilters(e), makeClearAllButton(e, o), document.querySelector(".filterTableBtn").addEventListener("click", () => { makeOption(e, c, i, r) }, { once: !0 }), s.addEventListener("click", () => { makeOption(e, c, i, r) }), d.addEventListener("click", () => { filterTable(e, c), $(`#filterTableFor-${e}`).modal("hide") }) } function makeClearAllButton(e, t) { let l = document.createElement("button"); l.classList.add("btn", "btn-outline-secondary", "clearAllFilters"), l.innerHTML = '<i class="bi bi-x top-0"></i>Clear Filters', l.addEventListener("click", () => { $(`#${e}`).bootstrapTable("filterBy", []) }), t.appendChild(l) } function saveTheFilters(e, t, l) { let a = document.querySelector(`[data-save-filter-as='${e}']`), o = document.querySelector(`#filterTableFor-${e}`); a.addEventListener("click", () => { let l; if (!document.querySelector(`[data-save-filter-name='${e}']`).value) return toastr.warning("Filter name cannot be empty!"), !1; let a = filterTable(e, t), i = document.querySelector(`[aria-labelledby="savedFilterForTable-${e}"]`); btnSaveFilterFunction(a), i.innerHTML = "", populateFilters(e), $(o).modal("hide") }) } function populateFilters(e) { $(".loader-area, .loader").css("display", "block"), $.ajax({ url: "/SubjectMaster/GETFiltersForBootstrapTable", type: "POST", success: function (t) { if (t.data) { var l = JSON.parse(t.data); l = l.map(e => (Object.values(e.result).forEach(e => { var t = 0; e.forEach(l => { "string" == typeof l && (e[t] = l.replace(/\&amp;+/gi, "&"), t++) }) }), e)); let a = document.querySelector(`[aria-labelledby="savedFilterForTable-${e}"]`); a.innerHTML = "", l.map(t => { var l = document.createElement("li"); l.innerHTML = `<a class="dropdown-item " data-saved-filter='${t.FilterName}' title="Delete" href="#">${t.FilterName}<i data-filter-id="${t.FilterId}" id="DeleteID" class="bi bi-trash font-16 deleteFilter"></i></a>`; let o = l.querySelector(`[data-saved-filter='${t.FilterName}']`); o.addEventListener("click", () => { $(function () { var l = $(`#${e}`), a = []; a.push(t.result), l.bootstrapTable("filterBy", a[0]) }) }); let i = l.querySelector(".deleteFilter"), r = i.getAttribute("data-filter-id"); i.addEventListener("click", () => { btnDeleteFilterById(r), l.remove() }), a.appendChild(l) }) } $(".loader-area, .loader").fadeOut("slow") }, error: function (e) { $(".loader-area, .loader").fadeOut("slow") } }) } function makeModalForFIlterTable(e) { let t = document.createElement("span"); t.innerHTML = `<div class="modal fade" id="filterTableFor-${e}" tabindex="-1" aria-labelledby="filterTableModal" aria-hidden="true" data-backdrop="true" ><div class="modal-dialog modal-lg  "><div class="modal-content"><div class="modal-header"><h5 class="modal-title" id="filterTableModal">Filter Table</h5><button type="button" class="close" data-bs-dismiss="modal" aria-label="Close"><span aria-hidden="true" style='font-size:25px;'>&times;</span></button></div><!-- add the class name with the table id here --><div class="modal-body" data-options-for-filter-table='${e}' id="tblSubjectNew"><i class="fa fa-plus fa-pull-right blue-icon"></i><br></div><div class='saveFilter'><span>Save Filter As</span><input type="text" data-save-filter-name='${e}' class='form-control w-50' placeholder="Enter Filter Name" id='filterName'></div><div class="modal-footer"><button type="button" data-save-filter-as='${e}' class="btn btn-outline-success" id="btnSaveFilter" >+ Save Filter</button><button type="button" class="btn btn-outline-danger" data-bs-dismiss="modal">Close</button><!-- also add the close button to work with the same table id --><button type="button" class="btn btn-primary" data-sort-table-id='${e}'>Apply</button></div></div></div></div>`, document.body.appendChild(t) } function btnSaveFilterFunction(e, t) { var l = document.getElementById("filterName").value, a = window.location.pathname.split("/").pop().split("/")[0]; ResultArr = JSON.stringify({ ResultArr: [{ ResultArray: JSON.stringify(e) }] }), $.ajax({ contentType: "application/json; charset=utf-8", dataType: "json", type: "POST", url: "/SubjectMaster/SaveFiltersForBootstrapTable?FilterName=" + l + "&TableId=" + t + "&PageName=" + a, data: ResultArr, success: function () { $("#result").html('"PassThings()" successfully called.') }, failure: function (e) { $("#result").html(e) } }) } function btnDeleteFilterById(e) { $.ajax({ url: "/SubjectMaster/DeleteFilterByIdForBootstrapTable?FilterId=" + e, type: "POST", contentType: "application/json;charset=utf-8", success: function (e) { window.location = "/SubjectMaster/SubjectMaster", $(".loader-area, .loader").fadeOut("slow") }, error: function (e) { $(".loader-area, .loader").fadeOut("slow") } }) } function makeSavedFilters(e, t) { let l = document.createElement("div"); l.classList.add("dropdown", "saved-filters"), l.id = `${e}-saved-filters`, l.innerHTML = `<button class="btn btn-outline-primary dropdown-toggle savedFilters" type="button" id="savedFilterForTable-${e}" data-bs-toggle="dropdown" aria-expanded="false"><i class ="bi bi-arrow-return-left "></i>Previous Filters</button><ul class="dropdown-menu savedFilterListUL" aria-labelledby="savedFilterForTable-${e}"></ul>`, t.appendChild(l) } function makeExportOption(e, t) { let l = document.createElement("select"); l.classList.add("btn", "selectExport"), l.id = `${e}-export-select`, l.innerHTML = `<option value="all">Export All</option><option value="selected">Export Selected</option>`; var a = $(e); $(function () { $(`${e}-export-select`).change(function () { a.bootstrapTable("destroy").bootstrapTable({ exportDataType: $(this).val(), exportTypes: ["json", "csv", "txt", "pdf", "doc", "excel"], columns: [{ field: "chekstate", checkbox: !0, visible: "selected" === $(this).val() },] }) }).trigger("change") }), t.appendChild(l) } function getFirstColumnValues(e, t) { let l = t[0], a = allData.map(e => e[`${Object.keys(allData[1])[Object.keys(allData[0]).indexOf(l)]}`]).filter((e, t, l) => l.indexOf(e) === t); return a.map(e => `<option value='${e}'>${e}</option>`).join("") } function getColumnNames(e, t, l) { let a = Object.keys(allData[0]), o = a.map((e, l) => `<option value='${e}'>${t[l]}</option>`).filter(e => { var t = RegExp(/\'[a-zA-Z0-9]*\'|\"[a-zA-Z0-9]*\"/gi); return l.includes(e.match(t)[0].slice(1, -1)) }); return o.join("") } function makeOption(e, t, l, a) { let o = document.createElement("div"); o.classList.add("filterOption"), o.innerHTML = `<label class='colNameLabel' for='colName'>Column Name<select  class ="colName select-field" ><!--<option value="default">Select One</option>-->${l}</select></label><label for='operator'>Operator<select id="ddlSubjectCategory" class ='operator select-field'><option class="string defaultString" value="string">Equal to</option><option class="numeric hide defaultNumeric" value='range'>Range</option><option class="numeric hide" value="<"><</option><option class="numeric hide" value="<="><=</option><option class="numeric hide" value=">">></option><option class="numeric hide" value=">=">>=</option><option class="numeric hide" value="==">==</option><!-- <option value="!=">Not equal to</option> --></select></label><label class='select-column-vals' for='columnValues'>Value<select class='optionsForColumn'>${a}</select></label><div class="input-container hide"><label for='valueToSearchFrom'>Value to Search<input type="number"  class ="valueToSearchFrom form-control"  /></label><label for='valueToSearchTo'><input type='number' name='' class='valueToSearchTo form-control' placeholder='To'/></label></div><i class="fa fa-times text-center minusInFilter"></i>`; let i = o.querySelector(".minusInFilter"); i.addEventListener("click", () => { o.remove() }); let r = o.querySelector(".operator"), n = o.querySelector(".select-column-vals"), s = o.querySelector(".input-container"), d = o.querySelector(".optionsForColumn"); r.addEventListener("change", () => { toggleOptions(r, n, s) }); let c = r.querySelectorAll(".numeric"), u = r.querySelectorAll(".string"), p = r.querySelector(".defaultNumeric"), b = r.querySelector(".defaultString"), m = { dropdownParent: $(`#filterTableFor-${e}`), width: 240, multiple: !0, placeholder: "Select..." }, v = o.querySelector(".colName"), f; v.addEventListener("change", () => { var e = v.value, t = typeof allData[0][e]; "string" === t ? (f = toggleRightSideValues(v), d.innerHTML = `${f}`, $(d).select2("destroy").select2(m), c.forEach(e => e.classList.add("hide")), u.forEach(e => e.classList.remove("hide")), n.classList.remove("hide"), s.classList.add("hide"), b.selected = !0) : "number" === t && (u.forEach(e => e.classList.add("hide")), c.forEach(e => e.classList.remove("hide")), n.classList.add("hide"), s.classList.remove("hide"), p.selected = !0, showRangeTo(s)) }), $(d).select2(m), t.appendChild(o) } function filterTable(e, t) { let l = t.querySelectorAll(".filterOption"), a = [], o = [...l].map(e => { let t = $(e).find(".optionsForColumn").val(), l = e.querySelector(".colName").value, o = e.querySelector(".operator").value, i = e.querySelector(".valueToSearchFrom").value, r = e.querySelector(".valueToSearchTo").value, n = []; if (a.includes(l)) { alert("Please make sure the column names for sorting are unique!!!"); return } if (a.push(l), "string" === o) t.map(e => n.push(e)); else if ("range" === o) for (let s = Number(i); s <= r; s++)n.push(s); else if ("<=" === o) { let d = Math.min(...allData.map(e => e[`${l}`])); for (; d <= i; d++)n.push(d) } else if (">" === o) { let c = Math.max(...allData.map(e => e[`${l}`])); for (; c > i; c--)n.push(c) } else if (">=" === o) { let u = Math.max(...allData.map(e => e[`${l}`])); for (; u >= i; u--)n.push(u) } else if ("<" === o) { let p = Math.min(...allData.map(e => e[`${l}`])); for (; p < i; p++)n.push(p) } else "==" === o && n.push(Number(i)); return { colName: l, parameterList: n } }); for (var i = {}, r = 0; r < o.length; r++)i[o[r].colName] = o[r].parameterList; return $(function () { $(`#${e}`).bootstrapTable("filterBy", i) }), i } function toggleRightSideValues(e) { let t = e.value, l = allData.map(e => e[`${t}`]).filter((e, t, l) => l.indexOf(e) === t); return l.map(e => `<option value="${e}">${e}</option>`).join("") } function toggleOptions(e, t, l) { "string" === e.value ? (t.classList.remove("hide"), l.classList.add("hide")) : "range" === e.value ? (hideColumnDropdown(t, l), showRangeTo(l)) : (hideColumnDropdown(t, l), hideRangeTo(l)) } function hideColumnDropdown(e, t) { e.classList.add("hide"), t.classList.remove("hide") } function showRangeTo(e) { e.querySelector(".valueToSearchFrom").placeholder = "From", e.querySelector("[for='valueToSearchTo']").style.display = "block" } function hideRangeTo(e) { e.querySelector(".valueToSearchFrom").placeholder = "", e.querySelector("[for='valueToSearchTo']").style.display = "none" } function toggleOptions(e, t, l) { "string" === e.value ? (t.classList.remove("hide"), l.classList.add("hide")) : "range" === e.value ? (hideColumnDropdown(t, l), showRangeTo(l)) : (hideColumnDropdown(t, l), hideRangeTo(l)) } function initializeExportAll(e) { var t = $(`#${e}`), l = document.querySelector(`#${e}`).closest(".table-responsive").querySelector(".tableToolbarLeft"); $(function () { $(l).find("select").change(function () { t.bootstrapTable("destroy").bootstrapTable({ exportDataType: $(this).val(), exportTypes: ["json", "csv", "txt", "pdf", "doc", "excel"], columns: [{ field: "chekstate", checkbox: !0, visible: "selected" === $(this).val() },] }) }).trigger("change") }) }
